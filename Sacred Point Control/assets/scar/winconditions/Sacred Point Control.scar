-----------------------------------------------------------------------
-- Imported Scripts
-----------------------------------------------------------------------

-- Import Utility Scripts
import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions

-- Import Gameplay Systems
import("gameplay/score.scar")					-- Tracks player score
import("gameplay/diplomacy.scar")				-- Manages Tribute

-- Import Win Conditions
import("winconditions/annihilation.scar")		-- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")		-- Support for player quitting or dropping (through pause menu or disconnection)
import("winconditions/surrender.scar")			-- Support for player surrender (through pause menu)

-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI
import("gameplay/event_cues.scar")
import("gameplay/currentageui.scar")

-- Import Custom Scripts
import("sacredsites.scar")

-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
	module = "Mod",
	options = {}
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
	
	Setup_GetWinConditionOptions(_mod.options)
	
	if _mod.options.tickets then
		-- Fast drain
		if _mod.options.tickets.fast_drain.enum_value == _mod.options.tickets.fast_drain.enum_items.fast_drain_enabled then
			_religious.options.fast_drain = true
		else
			_religious.options.fast_drain = false
		end
		
		-- Starting tickets
		if _mod.options.tickets.starting_tickets.enum_value == 0 then--_mod.options.tickets.starting_tickets.enum_items.["800_tickets"] then
			_religious.options.tickets = 800
		elseif _mod.options.tickets.starting_tickets.enum_value == 1 then
			_religious.options.tickets = 1200
		elseif _mod.options.tickets.starting_tickets.enum_value == 2 then
			_religious.options.tickets = 1600
		elseif _mod.options.tickets.starting_tickets.enum_value == 3 then
			_religious.options.tickets = 2000
		elseif _mod.options.tickets.starting_tickets.enum_value == 4 then
			_religious.options.tickets = 2400
		elseif _mod.options.tickets.starting_tickets.enum_value == 5 then
			_religious.options.tickets = 2800
		elseif _mod.options.tickets.starting_tickets.enum_value == 6 then
			_religious.options.tickets = 3600
		end
		
		-- Ticket multi
		if _mod.options.tickets.ticket_multiplier.enum_value == 0 then--_mod.options.tickets.ticket_multiplier.enum_items.["2x_multiplier"] then
			_religious.options.ticket_multiplier = 1
		elseif _mod.options.tickets.ticket_multiplier.enum_value == 1 then
			_religious.options.ticket_multiplier = 2
		elseif _mod.options.tickets.ticket_multiplier.enum_value == 2 then
			_religious.options.ticket_multiplier = 3
		end
	end
	
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()
	
	-- Enable Tribute UI
	Core_CallDelegateFunctions("TributeEnabled", true)
	
end

-- Called on match initialization before handing control to the player
function Mod_OnInit()
	


end

-- Called after initialization is done when game is fading up from black
function Mod_Start()
	
	-- Set player to Age 4, Resources to 0 except gold at 1600 and population cap to 200
	for i, player in pairs(PLAYERS) do
		
		-- Set player starting Ages to Imperial
		-- Ages are mapped to: Dark Age = 1, Feudal Age = 2, Castle Age = 3, Imperial Age = 4
		Player_SetCurrentAge(player.id, 4)
		
		-- Set player starting resources
		-- RT stands for Resource Type
		Player_SetResource(player.id, RT_Food, 1000)		
		Player_SetResource(player.id, RT_Wood, 1000)
		Player_SetResource(player.id, RT_Gold, 200)
		Player_SetResource(player.id, RT_Stone, 1000)
		
		-- Set starting population cap to 200
		Player_SetMaxPopulation(player.id, CT_Personnel, 200)	
	end

	FOW_ExploreAll() 

end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Mod_OnPlayerDefeated(player, reason)
	
	
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
	
	
	
end